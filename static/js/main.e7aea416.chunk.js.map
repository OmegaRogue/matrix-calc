{"version":3,"sources":["Col.jsx","Row.jsx","Matrix.jsx","TextMatrix.jsx","CalcButton.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Col","props","n","children","length","style","display","gridTemplateRows","Row","gridTemplateColumns","Matrix","workingMatrix","defaultValue","math","size","toArray","map","row","x","cell","y","SpinButton","step","onChange","e","f","parseFloat","iconButtonProps","iconProps","iconName","styles","root","maxWidth","Vector","v","i","console","log","DisplayVector","value","TextField","readOnly","TextVector","matrix","wrapper","onRender","CalcButton","IconButton","id","text","onClick","separatorStyle","content","fontSize","App","useState","result","valueMatrix","voltMatrix","state","setState","useBoolean","isOpen","openPanel","setTrue","dismissPanel","setFalse","doCalc","currentState","inverse","renderVarVector","Label","ThemeProvider","theme","DarkTheme","Panel","isLightDismiss","onDismiss","closeButtonAriaLabel","headerText","label","min","max","width","parseInt","isNaN","ScrollablePane","Stack","padding","flexWrap","justifyContent","alignItems","Separator","horizontalAlign","margin","gap","subset","verticalFill","textAlign","FontIcon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initializeIcons","mergeStyles","height","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7aea416.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Col = (props) => {\r\n  const n = props.children.length;\r\n  return <div style={{display: \"grid\", gridTemplateRows: \"repeat(\" + n + \", 1fr)\", ...props.style}}>\r\n    {props.children}\r\n  </div>;\r\n}\r\n\r\nexport default Col;","import React from 'react';\r\n\r\nconst Row = (props) => {\r\n  const n = props.children.length;\r\n  return <div style={{display: \"grid\", gridTemplateColumns: \"repeat(\" + n + \", 1fr)\", ...props.style}}>\r\n    {props.children}\r\n  </div>;\r\n}\r\n\r\nexport default Row;","import {SpinButton, TextField} from \"@fluentui/react\";\r\nimport React from 'react';\r\nimport * as math from 'mathjs';\r\nimport Col from \"./Col\";\r\nimport Row from \"./Row\";\r\n\r\nexport const Matrix = (props) => {\r\n  const matrix = props.defaultValue ?? math.identity(props.size);\r\n  const workingMatrix = matrix.toArray();\r\n  return (\r\n      <Row>\r\n        {workingMatrix.map((row, x) =>\r\n            <>\r\n              {row.map((cell, y) =>\r\n                  <SpinButton step={0.0001} defaultValue={cell} onChange={(e, n) => {\r\n                    const f = parseFloat(n);\r\n                    props.onChange(x, y, f);\r\n                  }}\r\n                              iconButtonProps={{iconProps: {iconName: ''}}}\r\n                              styles={{root: {maxWidth: \"3em\"}}}/>\r\n              )}\r\n            </>\r\n        )}\r\n      </Row>);\r\n};\r\n\r\nexport const Vector = (props) => {\r\n  const matrix = props.defaultValue ?? math.zeros(props.size, 1);\r\n  const workingMatrix = matrix.toArray();\r\n  return (\r\n      <Col>\r\n        {workingMatrix.map((v, i) =>\r\n            <SpinButton step={0.0001} defaultValue={v} onChange={(e, n) => {\r\n              console.log(e, n)\r\n              const f = parseFloat(n);\r\n              props.onChange(i, f);\r\n            }} iconButtonProps={{iconProps: {iconName: ''}}}/>\r\n        )}\r\n      </Col>\r\n  );\r\n};\r\n\r\nexport const DisplayVector = (props) => {\r\n  const matrix = props.defaultValue ?? props.value;\r\n  const workingMatrix = matrix.toArray();\r\n  return (\r\n      <Col>\r\n        {workingMatrix.map((v, i) =>\r\n            <TextField readOnly value={v}/>\r\n        )}\r\n      </Col>\r\n  );\r\n};","import * as math from \"mathjs\";\r\nimport React from 'react';\r\nimport Col from \"./Col\";\r\nimport Row from \"./Row\";\r\n\r\n// noinspection JSUnusedGlobalSymbols\r\nexport const TextMatrix = (props) => {\r\n  const matrix = props.value ?? math.identity(props.size);\r\n  const workingMatrix = matrix.toArray();\r\n  return (\r\n      <Row>\r\n        {workingMatrix.map(\r\n            (value1, x) => <>{value1.map((value, y) => <>{props.onRender(value, x, y)}</>)}</>\r\n        )}\r\n      </Row>\r\n  );\r\n}\r\n\r\nexport const TextVector = (props) => {\r\n  const matrix = props.value ?? math.zeros(props.size, 1);\r\n  const styles = props.styles ?? {wrapper: {}};\r\n  const workingMatrix = matrix.toArray();\r\n  return (\r\n      <Col style={styles.wrapper}>\r\n        {workingMatrix.map((v, i) => <>{props.onRender(v, i)}</>)}\r\n      </Col>\r\n  );\r\n}","import {IconButton} from \"@fluentui/react\";\r\nimport React from 'react';\r\n\r\nexport const CalcButton = (props) =>\r\n    <IconButton id={props.id} text=\"Calculate\" iconProps={{iconName: 'CalculatorEqualTo'}} onClick={props.onClick}/>;","import React, {useState} from 'react';\r\nimport {\r\n  FontIcon,\r\n  IconButton,\r\n  Label,\r\n  Panel,\r\n  ScrollablePane,\r\n  Separator,\r\n  SpinButton,\r\n  Stack,\r\n  ThemeProvider\r\n} from '@fluentui/react';\r\nimport './App.css';\r\nimport {DarkTheme} from \"@fluentui/theme-samples\";\r\n\r\nimport * as math from 'mathjs';\r\nimport {useBoolean} from '@fluentui/react-hooks'\r\nimport {DisplayVector, Matrix, Vector} from \"./Matrix\";\r\nimport {TextVector} from \"./TextMatrix\";\r\nimport {CalcButton} from \"./CalcButton\";\r\n\r\n\r\nconst separatorStyle = {content: {fontSize: '30px'}}\r\n\r\nexport const App = () => {\r\n  const [state, setState] = useState({\r\n    size: 3,\r\n    result: math.zeros(3, 1),\r\n    valueMatrix: math.identity(3, 3),\r\n    voltMatrix: math.zeros(3, 1),\r\n  });\r\n\r\n  const [isOpen, {setTrue: openPanel, setFalse: dismissPanel}] = useBoolean(false);\r\n\r\n  const changeVoltMatrix = (i, f) => setState(\r\n      (currentState) => {\r\n        if (isNaN(f)) {\r\n          return currentState;\r\n        }\r\n        return {\r\n          ...currentState,\r\n          voltMatrix: currentState.voltMatrix.subset(math.index(i, 0), f),\r\n        };\r\n      });\r\n  const changeValueMatrix = (x, y, f) => setState(\r\n      (currentState) => {\r\n        if (isNaN(f)) {\r\n          return currentState;\r\n        }\r\n        return {\r\n          ...currentState,\r\n          valueMatrix: math.subset(currentState.valueMatrix, math.index(x, y), f),\r\n        };\r\n      });\r\n  const changeSize = (e, n) => setState(\r\n      (currentState) => {\r\n        const i = parseInt(n);\r\n        if (isNaN(i)) {\r\n          return currentState;\r\n        }\r\n        return {\r\n          ...currentState,\r\n          result: math.resize(currentState.result, [i, 1]),\r\n          valueMatrix: math.resize(currentState.valueMatrix, [i, i]),\r\n          voltMatrix: math.resize(currentState.voltMatrix, [i, 1]),\r\n          size: i,\r\n\r\n        };\r\n      });\r\n  const doCalc = () => setState(\r\n      (currentState) => {\r\n        const size = currentState.valueMatrix.size();\r\n        const det = math.det(currentState.valueMatrix)\r\n        if (det === 0) {\r\n          console.log(\"det 0\");\r\n          return {...currentState, result: math.zeros(size[0], 1),};\r\n        }\r\n        const inverse = math.inv(currentState.valueMatrix);\r\n        const result = math.multiply(inverse, currentState.voltMatrix)\r\n\r\n        return {\r\n          ...currentState,\r\n          result: math.resize(result, [size[0], 1]),\r\n        };\r\n      }\r\n  );\r\n  // const renderResult = (v, i) => <Label>I<sub>{i + 1}</sub> = {v}</Label>;\r\n  const renderButtons = () => <CalcButton onClick={doCalc}/>;\r\n  const renderVarVector = (v, i) => <Label>I<sub>{i + 1}</sub></Label>;\r\n\r\n  return (\r\n      <ThemeProvider theme={DarkTheme}>\r\n        <Panel\r\n            isLightDismiss\r\n            isOpen={isOpen}\r\n            onDismiss={dismissPanel}\r\n            closeButtonAriaLabel=\"Close\"\r\n            headerText=\"Settings\"\r\n        >\r\n          <SpinButton defaultValue={state.size} label={'Size'} min={1} max={100} styles={{label: {width: '4em'}}}\r\n                      onChange={changeSize}/>\r\n\r\n        </Panel>\r\n\r\n        <ScrollablePane>\r\n          {/*<Sticky stickyPosition={StickyPositionType.Header}>*/}\r\n          <Stack styles={{root: {padding: \"1em default default\"}}}>\r\n            <IconButton iconProps={{iconName: 'Settings'}} text=\"Open Settings\" onClick={openPanel}/>\r\n          </Stack>\r\n          {/*</Sticky>*/}\r\n\r\n          <div>\r\n            <div style={{\r\n              display: \"flex\",\r\n              flexWrap: \"wrap\",\r\n              justifyContent: \"space-evenly\",\r\n              alignItems: \"stretch\",\r\n            }}>\r\n              <div>\r\n                <Separator styles={separatorStyle}>Equation</Separator>\r\n                <Stack horizontalAlign={\"center\"}>\r\n                  <div style={{\r\n                    display: \"flex\",\r\n                    flexWrap: \"wrap\",\r\n                    justifyContent: \"space-around\",\r\n                    margin: '0 auto',\r\n                    width: \"90%\", gap: \"1em\",\r\n                  }}>\r\n                    <Matrix size={state.size} onChange={changeValueMatrix}/>\r\n                    <div style={{\r\n                      display: \"grid\",\r\n                      gridTemplateColumns: \".3fr .1fr .2fr .2fr .2fr\",\r\n                    }}>\r\n                      <div/>\r\n                      <TextVector size={state.size} onRender={renderVarVector}/>\r\n                      <TextVector size={state.size} onRender={renderButtons}/>\r\n                      <Vector size={state.size} onChange={changeVoltMatrix}/>\r\n                    </div>\r\n                  </div>\r\n                </Stack>\r\n              </div>\r\n              <div>\r\n                <Separator styles={separatorStyle}>Result</Separator>\r\n                <Stack horizontalAlign=\"center\" verticalFill>\r\n                  <div style={{\r\n                    display: \"grid\",\r\n                    gridTemplateColumns: \".3fr .1fr .2fr .2fr .2fr\",\r\n                  }}>\r\n                    <div/>\r\n                    <TextVector size={state.size} onRender={renderVarVector}/>\r\n                    <TextVector size={state.size} onRender={() => <Label style={{\r\n                      justifyContent: \"center\",\r\n                      textAlign: \"center\",\r\n                      alignItems: \"center\",\r\n                      display: \"flex\"\r\n                    }}><FontIcon iconName=\"CalculatorEqualTo\"/></Label>}/>\r\n                    <DisplayVector value={state.result}/>\r\n                    {/*<TextVector value={state.result} onRender={renderResult}/>*/}\r\n                  </div>\r\n                </Stack>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n        </ScrollablePane>\r\n      </ThemeProvider>\r\n  );\r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport {initializeIcons, mergeStyles} from '@fluentui/react';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\ninitializeIcons();\r\n\r\nmergeStyles({\r\n  ':global(body,html,#root)': {\r\n    margin: 0,\r\n    padding: 0,\r\n    height: '100vh',\r\n  },\r\n});\r\n\r\nReactDOM.render(\r\n      <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}