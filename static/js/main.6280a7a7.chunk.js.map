{"version":3,"sources":["Matrix.jsx","TextArray.jsx","CalcButton.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Matrix","props","value","toArray","map","value1","x","nowrap","y","readOnly","SpinButton","step","onChange","e","n","f","parseFloat","styles","root","width","defaultValue","TextArray","matrix","math","count","fluid","_","i","render","TextMatrix","Label","onRender","CalcButton","IconButton","id","text","iconProps","iconName","onClick","setState","m","result","backingMatrix","backingMatrix2","console","log","size","resize","matrix3","onChangeSize","currentState","parseInt","isNaN","matrix2","rows","columns","App","useState","backingMatrix3","state","useBoolean","isOpen","openPanel","setTrue","dismissPanel","setFalse","ThemeProvider","theme","DarkTheme","Panel","isLightDismiss","onDismiss","closeButtonAriaLabel","headerText","label","min","max","ScrollablePane","Sticky","stickyPosition","StickyPositionType","Header","Stack","padding","Separator","content","fontSize","subset","horizontalAlign","verticalFill","v","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initializeIcons","mergeStyles","margin","height","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6280a7a7.chunk.js","sourcesContent":["import {Col, Row} from \"react-grid-system\";\r\nimport {SpinButton} from \"@fluentui/react\";\r\nimport React from 'react';\r\n\r\nexport const Matrix = (props) => {\r\n  return (\r\n      <Col>\r\n        {\r\n          props.value.toArray().map(\r\n              (value1, x) =>\r\n                  <Row nowrap>\r\n                    {value1.map((value, y) => {\r\n                          if (props.readOnly) {\r\n                           return <SpinButton\r\n                                readOnly\r\n                                step={0.0001}\r\n                                value={value}\r\n                                onChange={(e, n) => {\r\n                                  const f = parseFloat(n);\r\n                                  props.onChange(x, y, f);\r\n                                }}\r\n                                styles={{root: {width: '1em'}}}/>\r\n                          } else {\r\n                           return <SpinButton\r\n                                readOnly={props.readOnly}\r\n                                step={0.0001}\r\n                                defaultValue={value}\r\n                                onChange={(e, n) => {\r\n                                  const f = parseFloat(n);\r\n                                  props.onChange(x, y, f);\r\n                                }}\r\n                                styles={{root: {width: '1em'}}}/>\r\n                          }\r\n                        }\r\n                    )\r\n                    }\r\n                  </Row>\r\n          )\r\n        }\r\n      </Col>\r\n  );\r\n}\r\n","import * as math from \"mathjs\";\r\nimport {Col, Row} from \"react-grid-system\";\r\nimport React from 'react';\r\nimport {Label} from \"@fluentui/react\";\r\n\r\nexport const TextArray = (props) => {\r\n  const matrix = math.zeros(props.count)\r\n  return (\r\n      <Col nowrap fluid>\r\n        {matrix.toArray().map((_, i) => props.render(i))}\r\n      </Col>\r\n  );\r\n}\r\n\r\nexport const TextMatrix = (props) => {\r\n  return (\r\n      <Col>\r\n        {props.value.toArray().map(\r\n            (value1, x) =>\r\n                <Row nowrap>\r\n                  {value1.map((value, y) => {\r\n                    return <Label>{props.onRender(value,x,y)}</Label>\r\n                  })}\r\n                </Row>)}\r\n      </Col>\r\n  );\r\n}","import {IconButton} from \"@fluentui/react\";\r\nimport React from 'react';\r\nimport {Row} from \"react-grid-system\";\r\nimport * as math from 'mathjs';\r\n\r\nexport const CalcButton = (props) => {\r\n  return (\r\n      <Row nowrap>\r\n      <IconButton id={props.id} text=\"Calculate\" iconProps={{iconName: 'CalculatorEqualTo'}} onClick={\r\n        () => props.setState(\r\n            (m) => {\r\nconst result =math.multiply(math.inv(m.backingMatrix),m.backingMatrix2)\r\nconsole.log(result);\r\nconst size = result.size();\r\nsize[1] = 1;\r\nresult.resize(size);\r\n              return {\r\n                ...m,\r\n                matrix3: result\r\n              };\r\n            }\r\n        )\r\n      }\r\n      />\r\n      </Row>\r\n  );\r\n}","import React, {useState} from 'react';\r\nimport {\r\n  IconButton,\r\n  Label,\r\n  Panel,\r\n  ScrollablePane,\r\n  Separator,\r\n  SpinButton,\r\n  Stack,\r\n  Sticky,\r\n  StickyPositionType,\r\n  ThemeProvider\r\n} from '@fluentui/react';\r\nimport './App.css';\r\nimport {DarkTheme} from \"@fluentui/theme-samples\";\r\n\r\nimport {Col, Container, Row} from 'react-grid-system';\r\nimport * as math from 'mathjs';\r\nimport {useBoolean} from '@fluentui/react-hooks'\r\nimport {Matrix} from \"./Matrix\";\r\nimport {TextArray, TextMatrix} from \"./TextArray\";\r\nimport {CalcButton} from \"./CalcButton\";\r\n\r\nfunction onChangeSize(setState) {\r\n  return (e, n) => {\r\n    setState((currentState) => {\r\n      const i = parseInt(n);\r\n      if (isNaN(i)) {\r\n        return currentState;\r\n      }\r\n      currentState.matrix.resize([i, i]);\r\n      currentState.matrix2.resize([i, 1]);\r\n      currentState.matrix3.resize([i, 1]);\r\n      currentState.backingMatrix.resize([i, i]);\r\n      currentState.backingMatrix2.resize([i, 1]);\r\n      return {\r\n        ...currentState,\r\n        rows: i,\r\n        columns: i,\r\n\r\n      };\r\n    });\r\n  };\r\n}\r\n\r\nexport const App = () => {\r\n  const [state, setState] = useState({\r\n    rows: 3,\r\n    columns: 3,\r\n    matrix: math.zeros(3, 3),\r\n    matrix2: math.zeros(3, 1),\r\n    matrix3: math.zeros(3, 1),\r\n    backingMatrix: math.zeros(3, 3),\r\n    backingMatrix2: math.zeros(3, 3),\r\n    backingMatrix3: math.zeros(3, 1),\r\n  });\r\n\r\n  const [isOpen, {setTrue: openPanel, setFalse: dismissPanel}] = useBoolean(false);\r\n\r\n  return (\r\n      <ThemeProvider theme={DarkTheme}>\r\n        <Panel\r\n            isLightDismiss\r\n            isOpen={isOpen}\r\n            onDismiss={dismissPanel}\r\n            closeButtonAriaLabel=\"Close\"\r\n            headerText=\"Settings\"\r\n        >\r\n          <SpinButton defaultValue={state.rows} label={'Size'} min={1} max={10} styles={{label: {width: '4em'}}}\r\n                      onChange={onChangeSize(setState)}/>\r\n\r\n        </Panel>\r\n\r\n        <ScrollablePane>\r\n          <Sticky stickyPosition={StickyPositionType.Header}>\r\n            <Stack styles={{root: {padding: \"1em default default\"}}}>\r\n              <IconButton iconProps={{iconName: 'Settings'}} text=\"Open Settings\" onClick={openPanel}/>\r\n            </Stack>\r\n          </Sticky>\r\n\r\n          <Container>\r\n            <Row>\r\n              <Col>\r\n                <Separator styles={{content: {fontSize: '30px'}}}>Equation</Separator>\r\n                <Row>\r\n                  <Matrix value={state.matrix} onChange={\r\n                    (x, y, f) => {\r\n                      setState((currentState) => {\r\n                        if (isNaN(f)) {\r\n                          return currentState;\r\n                        }\r\n                        return {\r\n                          ...currentState,\r\n                          backingMatrix: currentState.backingMatrix.subset(math.index(x, y), f),\r\n                        };\r\n                      });\r\n                    }}/>\r\n                  <Col><Row nowrap>\r\n                    <TextArray count={state.rows} render={(i) => <Label>I<sub>{i + 1}</sub></Label>}/>\r\n                    <TextArray count={state.rows} render={() => <CalcButton setState={setState}/>}/>\r\n\r\n                    <Matrix value={state.matrix2} onChange={\r\n                      (x, y, f) => {\r\n                        setState((currentState) => {\r\n                          if (isNaN(f)) {\r\n                            return currentState;\r\n                          }\r\n                          return {\r\n                            ...currentState,\r\n                            backingMatrix2: currentState.backingMatrix2.subset(math.index(x, y), f),\r\n                          };\r\n                        });\r\n                      }}/></Row>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              <Col>\r\n\r\n                <Separator\r\n                    styles={{content: {fontSize: '30px'}}}\r\n                >Result</Separator>\r\n                <Container>\r\n                  <Stack horizontalAlign={\"center\"} verticalFill>\r\n                    <Row nowrap>\r\n\r\n                      <TextMatrix value={state.matrix3} readOnly onRender={(v, x) =>\r\n                          <>I<sub>{x + 1}</sub> = {v}</>\r\n                      }/>\r\n\r\n\r\n                    </Row>\r\n                  </Stack>\r\n                </Container>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n\r\n\r\n        </ScrollablePane>\r\n      </ThemeProvider>\r\n  );\r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport {initializeIcons, mergeStyles} from '@fluentui/react';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\ninitializeIcons();\r\n\r\nmergeStyles({\r\n  ':global(body,html,#root)': {\r\n    margin: 0,\r\n    padding: 0,\r\n    height: '100vh',\r\n  },\r\n});\r\n\r\nReactDOM.render(\r\n      <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}