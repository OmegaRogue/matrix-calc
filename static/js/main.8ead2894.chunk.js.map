{"version":3,"sources":["logo.svg","CalcButton.jsx","Matrix.jsx","TextMatrix.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["CalcButton","props","nowrap","IconButton","id","text","iconProps","iconName","onClick","setState","m","matrix","backingMatrix","matrix2","backingMatrix2","Matrix","value","toArray","map","value1","x","y","SpinButton","step","defaultValue","onChange","e","n","f","parseFloat","styles","root","width","TextMatrix","math","count","fluid","_","i","render","onChangeRows","currentState","parseInt","isNaN","resize","columns","rows","onChangeColumns","App","useState","state","useBoolean","isOpen","openPanel","setTrue","dismissPanel","setFalse","ThemeProvider","theme","DarkTheme","Panel","isLightDismiss","onDismiss","closeButtonAriaLabel","headerText","label","min","max","ScrollablePane","Sticky","stickyPosition","StickyPositionType","Header","Stack","padding","Separator","content","fontSize","subset","Label","align","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initializeIcons","mergeStyles","margin","height","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8ead2894.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {IconButton} from \"@fluentui/react\";\nimport React from 'react';\nimport {Col, Container, Row} from \"react-grid-system\";\n\nexport const CalcButton = (props) => {\n  return (\n      <Row nowrap>\n      <IconButton id={props.id} text=\"Calculate\" iconProps={{iconName: 'CalculatorEqualTo'}} onClick={\n        () => props.setState(\n            (m) => {\n              return {\n                ...m,\n                matrix: m.backingMatrix,\n                matrix2: m.backingMatrix2,\n              };\n            }\n        )\n      }\n      />\n      </Row>\n  );\n}","import {Col, Container, Row} from \"react-grid-system\";\nimport {SpinButton, TextField, Label} from \"@fluentui/react\";\nimport * as math from \"mathjs\";\nimport CalcButton from \"./CalcButton\";\nimport React from 'react';\n\nexport const Matrix = (props) => {\n  return (\n      <Col>\n        {\n          props.value.toArray().map(\n              (value1, x) =>\n                  <Row nowrap>\n                    {value1.map((value, y) =>\n\n                        <SpinButton\n                            step={0.0001}\n                            defaultValue={value}\n                            onChange={(e, n) => {\n                              const f = parseFloat(n);\n                              props.onChange(x, y, f);\n                            }}\n                            styles={{root: {width: '1em'}}}/>\n                    )\n                    }\n                  </Row>\n          )\n        }\n      </Col>\n  );\n}\n","import * as math from \"mathjs\";\nimport {Col} from \"react-grid-system\";\nimport React from 'react';\n\nexport const TextMatrix = (props) => {\n  const matrix = math.zeros(props.count)\n  return (\n      <Col nowrap fluid>\n        {matrix.toArray().map((_, i) => props.render(i))}\n      </Col>\n  );\n}","import React, {useState} from 'react';\nimport {\n  Stack, ButtonGrid, SpinButton, ThemeProvider, ButtonGridCell, DefaultButton, mergeStyleSets,\n  FocusZone, List, useConst, Image, MaskedTextField, TextField, PrimaryButton, CommandBar, Panel, ScrollablePane,\n  Sticky, StickyPositionType, Layer, IconButton, Label, Icon, Separator, Text\n} from '@fluentui/react';\nimport logo from './logo.svg'\nimport './App.css';\nimport {Checkbox} from '@fluentui/react/lib/Checkbox';\nimport {DarkTheme} from \"@fluentui/theme-samples\";\nimport GridLayout from 'react-grid-layout';\n\nimport {Container, Row, Col} from 'react-grid-system';\nimport * as math from 'mathjs';\nimport {useBoolean} from '@fluentui/react-hooks'\nimport {Matrix} from \"./Matrix\";\nimport {TextMatrix} from \"./TextMatrix\";\nimport {CalcButton} from \"./CalcButton\";\n\n\nfunction onChangeRows(setState) {\n  return (e, n) => {\n    setState((currentState) => {\n      const i = parseInt(n);\n      if (isNaN(i)) {\n        return currentState;\n      }\n      currentState.matrix.resize([i, currentState.columns]);\n      currentState.matrix2.resize([i, 1]);\n      currentState.backingMatrix.resize([i, currentState.columns]);\n      currentState.backingMatrix2.resize([i, 1]);\n      return {\n        ...currentState,\n        rows: i,\n\n      };\n    });\n  };\n}\n\nfunction onChangeColumns(setState) {\n  return (e, n) => {\n    setState((currentState) => {\n      const i = parseInt(n);\n      if (isNaN(i)) {\n        return currentState;\n      }\n      currentState.matrix.resize([currentState.rows, i]);\n      currentState.backingMatrix.resize([currentState.rows, i]);\n      return {\n        ...currentState,\n        columns: i,\n\n      };\n    });\n  };\n}\n\nexport const App = () => {\n  const [state, setState] = useState({\n    rows: 3,\n    columns: 3,\n    matrix: math.zeros(3, 3),\n    matrix2: math.zeros(3, 1),\n    backingMatrix: math.zeros(3, 3),\n    backingMatrix2: math.zeros(3, 1),\n  });\n\n  const [isOpen, {setTrue: openPanel, setFalse: dismissPanel}] = useBoolean(false);\n\n  return (\n      <ThemeProvider theme={DarkTheme}>\n        <Panel\n            isLightDismiss\n            isOpen={isOpen}\n            onDismiss={dismissPanel}\n            closeButtonAriaLabel=\"Close\"\n            headerText=\"Settings\"\n        >\n          <SpinButton defaultValue={state.rows} label={'Rows'} min={1} max={100} styles={{label: {width: '4em'}}}\n                      onChange={onChangeRows(setState)}\n          />\n          <SpinButton defaultValue={state.columns} label={'Columns'} min={1} max={100}\n                      styles={{label: {width: '4em'}}}\n                      onChange={onChangeColumns(setState)}\n          />\n        </Panel>\n\n        <ScrollablePane>\n          <Sticky stickyPosition={StickyPositionType.Header}>\n            <Stack styles={{root: {padding: \"1em default default\"}}}>\n              <IconButton iconProps={{iconName: 'Settings'}} text=\"Open Settings\" onClick={openPanel}/>\n            </Stack>\n          </Sticky>\n\n          {/*<Stack horizontalAlign=\"center\" verticalAlign=\"center\" verticalFill maxHeight='90%'>*/}\n          <Container>\n            <Row>\n            <Col>\n                <Separator styles={{content: {fontSize: '30px'}}}>Equation</Separator>\n                <Row nowrap>\n                  <Matrix value={state.matrix} onChange={\n                    (x, y, f) => {\n                      setState((currentState) => {\n                        if (isNaN(f)) {\n                          return currentState;\n                        }\n                        return {\n                          ...currentState,\n                          backingMatrix: currentState.backingMatrix.subset(math.index(x, y), f),\n                        };\n                      });\n                    }}/>\n                  <TextMatrix count={state.rows} render={(i) => <Label>I<sub>{i + 1}</sub></Label>}/>\n                  <TextMatrix count={state.rows} render={(i) => <><CalcButton setState={setState}/></>}/>\n\n                  <Matrix value={state.matrix2} onChange={\n                    (x, y, f) => {\n                      setState((currentState) => {\n                        if (isNaN(f)) {\n                          return currentState;\n                        }\n                        return {\n                          ...currentState,\n                          backingMatrix2: currentState.backingMatrix2.subset(math.index(x, y), f),\n                        };\n                      });\n                    }}/>\n                </Row>\n            </Col>\n            <Col>\n\n                <Separator styles={{content: {fontSize: '30px'}}}>Result</Separator>\n              <Container>\n                <Row nowrap align={\"center\"}>\n\n                  <TextMatrix count={state.rows} render={(i) => <Label>I<sub>{i + 1}</sub></Label>}/>\n                  {/*<TextMatrix count={state.rows} render={(i) => <Icon iconName='CalculatorEqualTo'/></Label>}/>*/}\n                  <Matrix value={state.matrix2} onChange={\n                    (x, y, f) => {\n                      setState((currentState) => {\n                        if (isNaN(f)) {\n                          return currentState;\n                        }\n                        return {\n                          ...currentState,\n                          backingMatrix2: currentState.backingMatrix2.subset(math.index(x, y), f),\n                        };\n                      });\n                    }}/>\n\n                </Row>\n              </Container>\n            </Col>\n            </Row>\n          </Container>\n          {/*</Stack>*/}\n\n        </ScrollablePane>\n\n      </ThemeProvider>\n  );\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport { mergeStyles, initializeIcons } from '@fluentui/react';\nimport reportWebVitals from './reportWebVitals';\n\ninitializeIcons();\n\nmergeStyles({\n  ':global(body,html,#root)': {\n    margin: 0,\n    padding: 0,\n    height: '100vh',\n  },\n});\n\nReactDOM.render(\n      <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}