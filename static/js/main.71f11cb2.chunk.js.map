{"version":3,"sources":["logo.svg","CalcButton.jsx","Matrix.jsx","TextArray.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["CalcButton","props","nowrap","IconButton","id","text","iconProps","iconName","onClick","setState","m","result","math","backingMatrix","backingMatrix2","console","log","size","resize","matrix3","Matrix","value","toArray","map","value1","x","y","readOnly","SpinButton","step","onChange","e","n","f","parseFloat","styles","root","width","defaultValue","TextArray","matrix","count","fluid","_","i","render","TextMatrix","Label","onRender","onChangeSize","currentState","parseInt","isNaN","matrix2","rows","columns","App","useState","backingMatrix3","state","useBoolean","isOpen","openPanel","setTrue","dismissPanel","setFalse","ThemeProvider","theme","DarkTheme","Panel","isLightDismiss","onDismiss","closeButtonAriaLabel","headerText","label","min","max","ScrollablePane","Sticky","stickyPosition","StickyPositionType","Header","Stack","padding","Separator","content","fontSize","subset","horizontalAlign","verticalFill","v","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initializeIcons","mergeStyles","margin","height","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.71f11cb2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {IconButton} from \"@fluentui/react\";\nimport React from 'react';\nimport {Col, Container, Row} from \"react-grid-system\";\nimport * as math from 'mathjs';\n\nexport const CalcButton = (props) => {\n  return (\n      <Row nowrap>\n      <IconButton id={props.id} text=\"Calculate\" iconProps={{iconName: 'CalculatorEqualTo'}} onClick={\n        () => props.setState(\n            (m) => {\nconst result =math.multiply(math.inv(m.backingMatrix),m.backingMatrix2)\nconsole.log(result);\nconst size = result.size();\nsize[1] = 1;\nresult.resize(size);\n              return {\n                ...m,\n                matrix3: result\n              };\n            }\n        )\n      }\n      />\n      </Row>\n  );\n}","import {Col, Container, Row} from \"react-grid-system\";\nimport {SpinButton, TextField, Label} from \"@fluentui/react\";\nimport * as math from \"mathjs\";\nimport CalcButton from \"./CalcButton\";\nimport React from 'react';\n\nexport const Matrix = (props) => {\n  return (\n      <Col>\n        {\n          props.value.toArray().map(\n              (value1, x) =>\n                  <Row nowrap>\n                    {value1.map((value, y) => {\n                          if (props.readOnly) {\n                           return <SpinButton\n                                readOnly\n                                step={0.0001}\n                                value={value}\n                                onChange={(e, n) => {\n                                  const f = parseFloat(n);\n                                  props.onChange(x, y, f);\n                                }}\n                                styles={{root: {width: '1em'}}}/>\n                          } else {\n                           return <SpinButton\n                                readOnly={props.readOnly}\n                                step={0.0001}\n                                defaultValue={value}\n                                onChange={(e, n) => {\n                                  const f = parseFloat(n);\n                                  props.onChange(x, y, f);\n                                }}\n                                styles={{root: {width: '1em'}}}/>\n                          }\n                        }\n                    )\n                    }\n                  </Row>\n          )\n        }\n      </Col>\n  );\n}\n","import * as math from \"mathjs\";\r\nimport {Col, Row} from \"react-grid-system\";\r\nimport React from 'react';\r\nimport {SpinButton, Label} from \"@fluentui/react\";\r\n\r\nexport const TextArray = (props) => {\r\n  const matrix = math.zeros(props.count)\r\n  return (\r\n      <Col nowrap fluid>\r\n        {matrix.toArray().map((_, i) => props.render(i))}\r\n      </Col>\r\n  );\r\n}\r\n\r\nexport const TextMatrix = (props) => {\r\n  return (\r\n      <Col>\r\n        {props.value.toArray().map(\r\n            (value1, x) =>\r\n                <Row nowrap>\r\n                  {value1.map((value, y) => {\r\n                    return <Label>{props.onRender(value,x,y)}</Label>\r\n                  })}\r\n                </Row>)}\r\n      </Col>\r\n  );\r\n}","import React, {useState} from 'react';\nimport {\n  Stack, ButtonGrid, SpinButton, ThemeProvider, ButtonGridCell, DefaultButton, mergeStyleSets,\n  FocusZone, List, useConst, Image, MaskedTextField, TextField, PrimaryButton, CommandBar, Panel, ScrollablePane,\n  Sticky, StickyPositionType, Layer, IconButton, Label, Icon, Separator, Text\n} from '@fluentui/react';\nimport logo from './logo.svg'\nimport './App.css';\nimport {Checkbox} from '@fluentui/react/lib/Checkbox';\nimport {DarkTheme} from \"@fluentui/theme-samples\";\nimport GridLayout from 'react-grid-layout';\n\nimport {Container, Row, Col} from 'react-grid-system';\nimport * as math from 'mathjs';\nimport {useBoolean} from '@fluentui/react-hooks'\nimport {Matrix} from \"./Matrix\";\nimport {TextArray, TextMatrix} from \"./TextArray\";\nimport {CalcButton} from \"./CalcButton\";\n\n\nfunction onChangeSize(setState) {\n  return (e, n) => {\n    setState((currentState) => {\n      const i = parseInt(n);\n      if (isNaN(i)) {\n        return currentState;\n      }\n      currentState.matrix.resize([i, i]);\n      currentState.matrix2.resize([i, 1]);\n      currentState.matrix3.resize([i, 1]);\n      currentState.backingMatrix.resize([i, i]);\n      currentState.backingMatrix2.resize([i, 1]);\n      return {\n        ...currentState,\n        rows: i,\n        columns: i,\n\n      };\n    });\n  };\n}\n\nexport const App = () => {\n  const [state, setState] = useState({\n    rows: 3,\n    columns: 3,\n    matrix: math.zeros(3, 3),\n    matrix2: math.zeros(3, 1),\n    matrix3: math.zeros(3, 1),\n    backingMatrix: math.zeros(3, 3),\n    backingMatrix2: math.zeros(3, 3),\n    backingMatrix3: math.zeros(3, 1),\n  });\n\n  const [isOpen, {setTrue: openPanel, setFalse: dismissPanel}] = useBoolean(false);\n\n  return (\n      <ThemeProvider theme={DarkTheme}>\n        <Panel\n            isLightDismiss\n            isOpen={isOpen}\n            onDismiss={dismissPanel}\n            closeButtonAriaLabel=\"Close\"\n            headerText=\"Settings\"\n        >\n          <SpinButton defaultValue={state.rows} label={'Size'} min={1} max={7} styles={{label: {width: '4em'}}}\n                      onChange={onChangeSize(setState)}\n          />\n        </Panel>\n\n        <ScrollablePane>\n          <Sticky stickyPosition={StickyPositionType.Header}>\n            <Stack styles={{root: {padding: \"1em default default\"}}}>\n              <IconButton iconProps={{iconName: 'Settings'}} text=\"Open Settings\" onClick={openPanel}/>\n            </Stack>\n          </Sticky>\n\n          {/*<Stack horizontalAlign=\"center\" verticalAlign=\"center\" verticalFill maxHeight='90%'>*/}\n          <Container>\n            <Row>\n              <Col>\n                <Separator styles={{content: {fontSize: '30px'}}}>Equation</Separator>\n                <Row>\n                  <Matrix value={state.matrix} onChange={\n                    (x, y, f) => {\n                      setState((currentState) => {\n                        if (isNaN(f)) {\n                          return currentState;\n                        }\n                        return {\n                          ...currentState,\n                          backingMatrix: currentState.backingMatrix.subset(math.index(x, y), f),\n                        };\n                      });\n                    }}/>\n                    <Col><Row nowrap>\n                  <TextArray count={state.rows} render={(i) => <Label>I<sub>{i + 1}</sub></Label>}/>\n                  <TextArray count={state.rows} render={() => <CalcButton setState={setState}/>}/>\n\n                  <Matrix value={state.matrix2} onChange={\n                    (x, y, f) => {\n                      setState((currentState) => {\n                        if (isNaN(f)) {\n                          return currentState;\n                        }\n                        return {\n                          ...currentState,\n                          backingMatrix2: currentState.backingMatrix2.subset(math.index(x, y), f),\n                        };\n                      });\n                    }}/></Row>\n                    </Col>\n                </Row>\n              </Col>\n              <Col>\n\n                <Separator\n                    styles={{content: {fontSize: '30px'}}}\n                >Result</Separator>\n                <Container>\n                  <Stack horizontalAlign={\"center\"} verticalFill>\n                    <Row nowrap>\n\n\n                      {/*<TextArray count={state.rows} render={(i) => <Label>I<sub>{i + 1}</sub></Label>}/>*/}\n                      {/*<TextMatrix count={state.rows} render={(i) => <Icon iconName='CalculatorEqualTo'/></Label>}/>*/}\n                      <TextMatrix value={state.matrix3} readOnly onRender={(v, x, y) =>\n                          <>I<sub>{x + 1}</sub> = {v}</>\n                      }/>\n\n\n                    </Row>\n                  </Stack>\n                </Container>\n              </Col>\n            </Row>\n          </Container>\n          {/*</Stack>*/}\n\n        </ScrollablePane>\n\n      </ThemeProvider>\n  );\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport { mergeStyles, initializeIcons } from '@fluentui/react';\nimport reportWebVitals from './reportWebVitals';\n\ninitializeIcons();\n\nmergeStyles({\n  ':global(body,html,#root)': {\n    margin: 0,\n    padding: 0,\n    height: '100vh',\n  },\n});\n\nReactDOM.render(\n      <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}